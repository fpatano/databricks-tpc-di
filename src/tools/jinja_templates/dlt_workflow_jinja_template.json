{
    "name": "{{ job_name }}",
    {% if scale_factor > 100 %}
    "description": "The ***run_customermgmt*** paramater accepts either ***YES*** or ***NO***.  If this XML file has already been ingested, the *dw_init* task does **NOT** remove it (since it is kind of a pain). Therefore, if you want to disable this task and just keep the existing historical customermgmt staging table then change to ***NO***.  It is set to ***YES*** by default.",
    {% endif %}
    "email_notifications": {},
    "webhook_notifications": {},
    "timeout_seconds": 0,
    "max_concurrent_runs": 1,
    "format": "MULTI_TASK", 
    "parameters": [
      {% if scale_factor > 100 %}
      {
        "name": "run_customermgmt",
        "default": "YES"
      },
      {% endif %}
      {
        "name": "catalog",
        "default": "{{ catalog }}"
      },
      {
        "name": "scale_factor",
        "default": "{{ scale_factor }}"
      },
      {
        "name": "wh_db",
        "default": "{{ wh_target }}_DLT_{{ edition }}_{{ scale_factor }}"
      },
      {
        "name": "tpcdi_directory",
        "default": "{{ tpcdi_directory }}"
      }
    ],
    {% if scale_factor > 100 %}
    "job_clusters": [
        {
            "job_cluster_key": "{{ job_name }}_compute",
            "new_cluster": {
                "spark_version": "{{ dbr }}",
                "spark_conf": {
                    "spark.master": "local[*, 4]",
                    "spark.databricks.adaptive.localShuffleReader.enabled": "true",
                    "spark.databricks.delta.schema.autoMerge.enabled": "true",
                    "spark.databricks.delta.properties.defaults.autoOptimize.optimizeWrite": "true",
                    "spark.databricks.streaming.forEachBatch.optimized.enabled": "true",
                    "spark.databricks.preemption.enabled": "false",
                    "spark.databricks.streaming.forEachBatch.optimized.fastPath.enabled": "true",
                    "spark.sql.shuffle.partitions": "auto"
                },
                "spark_env_vars": {
                    "PYSPARK_PYTHON": "/databricks/python3/bin/python3"
                },
                "custom_tags": {
                    "ResourceClass": "SingleNode"
                },
                "driver_node_type_id": "{{ driver_node_type }}",
                "node_type_id": "{{ worker_node_type }}",
                "num_workers": 0,
                "enable_elastic_disk": true,
                "data_security_mode": "SINGLE_USER",
                "runtime_engine": "STANDARD"
            }
        }
    ],
    {% endif %}
    "tasks": [
        {% if scale_factor > 100 %}
        {
            "task_key": "run_customermgmt_YES_NO",
            "run_if": "ALL_SUCCESS",
            "condition_task": {
                "op": "EQUAL_TO",
                {% raw %}"left": "{{job.parameters.run_customermgmt}}"{% endraw %},
                "right": "YES"
            },
            "timeout_seconds": 0,
            "email_notifications": {},
            "notification_settings": {
                "no_alert_for_skipped_runs": false,
                "no_alert_for_canceled_runs": false,
                "alert_on_last_attempt": false
            },
            "webhook_notifications": {}
        },
        {
            "task_key": "ingest_customermgmt_cluster",
            "depends_on": [
                {
                "task_key": "run_customermgmt_YES_NO",
                "outcome": "true"
                }
            ],
            "run_if": "ALL_SUCCESS",
            "notebook_task": {
                "notebook_path": "{{ repo_src_path }}/incremental_batches/bronze/CustomerMgmtRaw",
                "source": "WORKSPACE"
            },
            "job_cluster_key": "{{ job_name }}_compute",
            "libraries": [
                {
                    "maven": {
                        "coordinates": "com.databricks:spark-xml_2.12:0.16.0"
                    }
                }
            ],
            "timeout_seconds": 0,
            "email_notifications": {},
            "notification_settings": {
                "no_alert_for_skipped_runs": false,
                "no_alert_for_canceled_runs": false,
                "alert_on_last_attempt": false
            },
            "webhook_notifications": {}
        },
        {
            "task_key": "TPC-DI-DLT-PIPELINE",
            "run_if": "ALL_SUCCESS",
            "depends_on": [
                {
                    "task_key": "run_customermgmt_YES_NO",
                    "outcome": "false"
                },
                {
                    "task_key": "ingest_customermgmt_cluster"
                }
            ],
            "run_if": "AT_LEAST_ONE_SUCCESS",
            "pipeline_task": {
                "pipeline_id": "{{ pipeline_id }}",
                "full_refresh": true
            },
            "timeout_seconds": 0,
            "email_notifications": {
                "no_alert_for_skipped_runs": false
            }
        }
        {% else %}
        {
            "task_key": "TPC-DI-DLT-PIPELINE",
            "run_if": "ALL_SUCCESS",
            "pipeline_task": {
                "pipeline_id": "{{ pipeline_id }}",
                "full_refresh": true
            },
            "timeout_seconds": 0,
            "email_notifications": {
                "no_alert_for_skipped_runs": false
            }
        }
        {% endif %}
    ]
}